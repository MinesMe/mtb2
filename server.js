const path = require('path');
const express = require('express');
const multer = require('multer');
const pdfParse = require('pdf-parse');
require('dotenv').config();

const app = express();
const upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 20 * 1024 * 1024 }
});

// Serve mobile SPA at root
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'mobile.html'));
});

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

function buildPrompt(a) {
  const lines = [
    '# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ú–¢–ë–∞–Ω–∫',
    '',
    '–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ú–¢–ë–∞–Ω–∫–∞ (–ë–µ–ª–∞—Ä—É—Å—å). –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≤—ã–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É—Å–ª—É–≥ –ú–¢–ë–∞–Ω–∫–∞.',
    '',
    '## –ü—Ä–æ–¥—É–∫—Ç—ã –ú–¢–ë–∞–Ω–∫–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:',
    '',
    '### –í–∫–ª–∞–¥—ã:',
    '- **–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥** ‚Äî –¥–æ 12% –≥–æ–¥–æ–≤—ã—Ö –≤ BYN, –ø–æ–ø–æ–ª–Ω—è–µ–º—ã–π, —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤',
    '- **–°—Ä–æ—á–Ω—ã–π –≤–∫–ª–∞–¥** ‚Äî –¥–æ 13% –≥–æ–¥–æ–≤—ã—Ö, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤–µ—Å—å —Å—Ä–æ–∫ (–æ—Ç 3 –¥–æ 36 –º–µ—Å—è—Ü–µ–≤)',
    '- **–ü–µ–Ω—Å–∏–æ–Ω–Ω—ã–π –≤–∫–ª–∞–¥** ‚Äî –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä–æ–≤ (–¥–æ 14% –≥–æ–¥–æ–≤—ã—Ö)',
    '',
    '### –ö—Ä–µ–¥–∏—Ç—ã:',
    '- **–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç** ‚Äî –æ—Ç 9.9% –≥–æ–¥–æ–≤—ã—Ö, —Å—É–º–º–∞ –¥–æ 100 000 BYN, —Å—Ä–æ–∫ –¥–æ 7 –ª–µ—Ç, –æ–Ω–ª–∞–π–Ω-–æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç',
    '- **–†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ** ‚Äî –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å –ø–æ–Ω–∏–∂–µ–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏ –¥–æ 8.5% –≥–æ–¥–æ–≤—ã—Ö',
    '- **–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç** ‚Äî –æ—Ç 10% –≥–æ–¥–æ–≤—ã—Ö, –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å –æ—Ç 10%, —Å—Ä–æ–∫ –¥–æ 7 –ª–µ—Ç',
    '- **–ò–ø–æ—Ç–µ–∫–∞** ‚Äî –æ—Ç 11% –≥–æ–¥–æ–≤—ã—Ö, –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å –æ—Ç 15%, –≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–æ–ª–æ–¥—ã—Ö —Å–µ–º–µ–π',
    '',
    '### –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è:',
    '- **–ö–æ–Ω–≤–µ—Ä—Ç–∏–∫–∏** ‚Äî —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–µ–º—å—ë–π –Ω–∞ –æ–±—â—É—é —Ü–µ–ª—å, –º–æ–∂–Ω–æ –≤–Ω–æ—Å–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤–º–µ—Å—Ç–µ',
    '- **–ö–æ–ø–∏–ª–∫–∞** ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥ —Ä–∞–∑–Ω–∏—Ü—ã –Ω–∞ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á—ë—Ç',
    '',
    '### –¶–∏—Ñ—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã:',
    '- **–ú–¢–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω** ‚Äî –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏, —à–∞–±–ª–æ–Ω–∞–º–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π —Ä–∞—Å—Ö–æ–¥–æ–≤',
    '- **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å** ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö, –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
    '',
    '## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞:',
    '',
    '### 1. –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (5-7 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤)',
    '- –û–±—â–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è',
    '- –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
    '- –°—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
    '',
    '### 2. –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
    '**–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**',
    '- –°—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –∏ –µ–≥–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
    '- –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å %)',
    '- –ù–æ—Ä–º–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π (% –æ—Ç –¥–æ—Ö–æ–¥–∞)',
    '- –î–æ–ª–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ã)',
    '- –°–≤–æ–±–æ–¥–Ω—ã–π –∫—ç—à—Ñ–ª–æ—É (–¥–æ—Ö–æ–¥ - —Ä–∞—Å—Ö–æ–¥—ã - –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞)',
    '',
    '**–ê–Ω–æ–º–∞–ª–∏–∏ –∏ —Ä–∏—Å–∫–∏:**',
    '- –í—Å–ø–ª–µ—Å–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–Ω–µ–æ–±—ã—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã)',
    '- –ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–æ–≤',
    '- –ü—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º',
    '- –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    '- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥—É—à–∫–∏',
    '',
    '### 3. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –ú–¢–ë–∞–Ω–∫',
    '',
    '**–î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**',
    '- –ï—Å–ª–∏ –º–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ ‚Üí –ø—Ä–µ–¥–ª–æ–∂–∏ –∏—Ö –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–º–µ–Ω—É –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö',
    '- –ü—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø–æ–∏—Å–∫ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤',
    '- –†–µ–∫–æ–º–µ–Ω–¥—É–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é —Ç—Ä–∞—Ç —á–µ—Ä–µ–∑ **–ú–¢–ë–∞–Ω–∫ –û–Ω–ª–∞–π–Ω** –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –±—é–¥–∂–µ—Ç–∞',
    '',
    '**–î–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:**',
    '- –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥—É—à–∫–∏ ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥—É–π **–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥** (–¥–æ 12% –≥–æ–¥–æ–≤—ã—Ö) –∏ —Ü–µ–ª—å 3-6 –º–µ—Å—è—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
    '- –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å ‚Üí –ø—Ä–µ–¥–ª–æ–∂–∏ **–°—Ä–æ—á–Ω—ã–π –≤–∫–ª–∞–¥** (–¥–æ 13% –≥–æ–¥–æ–≤—ã—Ö) –Ω–∞ –Ω—É–∂–Ω—ã–π —Å—Ä–æ–∫',
    '- –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –≥–∏–±–∫–æ—Å—Ç—å ‚Üí –∞–∫—Ç–∏–≤–∏—Ä—É–π **–ö–æ–ø–∏–ª–∫—É** (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫)',
    '- –î–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π —Å —Å–µ–º—å—ë–π/–¥—Ä—É–∑—å—è–º–∏ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π **–ö–æ–Ω–≤–µ—Ä—Ç–∏–∫–∏** (–æ–±—â–∞—è –∫–æ–ø–∏–ª–∫–∞ –Ω–∞ —Ü–µ–ª—å)',
    '',
    '**–î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏:**',
    '- –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ ‚Üí –ø—Ä–µ–¥–ª–æ–∂–∏ **—Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ** (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–Ω–∏–∂–µ–Ω–∏–µ–º —Å—Ç–∞–≤–∫–∏ –¥–æ 8.5%)',
    '- –ï—Å–ª–∏ –≤—ã—Å–æ–∫–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É ‚Üí —Ä–∞—Å—Å—á–∏—Ç–∞–π —ç–∫–æ–Ω–æ–º–∏—é –ø—Ä–∏ —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –ú–¢–ë–∞–Ω–∫',
    '- –ï—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ ‚Üí –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –±–∞–Ω–∫–æ–º',
    '',
    '**–î–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫:**',
    '- –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ ‚Üí **–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç** –æ—Ç 10% –≥–æ–¥–æ–≤—ã—Ö',
    '- –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∂–∏–ª—å—ë ‚Üí **–ò–ø–æ—Ç–µ–∫–∞** –æ—Ç 11% –≥–æ–¥–æ–≤—ã—Ö —Å –≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
    '- –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –ª—é–±—ã–µ —Ü–µ–ª–∏ ‚Üí **–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç** –æ—Ç 9.9% –≥–æ–¥–æ–≤—ã—Ö',
    '',
    '### 4. –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π (30-60-90 –¥–Ω–µ–π)',
    '',
    '**–ü–µ—Ä–≤—ã–µ 30 –¥–Ω–µ–π (—Å—Ä–æ—á–Ω–æ):**',
    '- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ú–¢–ë–∞–Ω–∫',
    '- –ù–∞–ø—Ä–∏–º–µ—Ä: "–û—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥ "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π" –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ 1 000 BYN"',
    '',
    '**60 –¥–Ω–µ–π (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è):**',
    '- –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏, –∫–æ–ø–∏–ª–∫–∞)',
    '- –ü–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π',
    '',
    '**90 –¥–Ω–µ–π (—Ä–∞–∑–≤–∏—Ç–∏–µ):**',
    '- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏–∫–∏',
    '- –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥—É—à–∫–∏',
    '',
    '### 5. –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç)',
    '| –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –°—É–º–º–∞ (BYN) | % –æ—Ç –¥–æ—Ö–æ–¥–∞ | –¢—Ä–µ–Ω–¥ | –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è |',
    '|-----------|-------------|-------------|-------|--------------|',
    '| –ü—Ä–æ–¥—É–∫—Ç—ã  | 450         | 22%         | ‚Üë     | –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø–æ–∫—É–ø–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–æ–∫ |',
    '',
    '## –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
    '- **–ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∞—Å–∏–≤—ã–π Markdown**: –∑–∞–≥–æ–ª–æ–≤–∫–∏ (##, ###), –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç (**—Ç–µ–∫—Å—Ç**), —Å–ø–∏—Å–∫–∏ (-, 1.), —Ç–∞–±–ª–∏—Ü—ã',
    '- **–î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏** –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–µ–Ω—Ç–æ–≤: üí∞ –¥–µ–Ω—å–≥–∏, üìä –∞–Ω–∞–ª–∏–∑, ‚úÖ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, üéØ —Ü–µ–ª–∏, üìà —Ä–æ—Å—Ç, ‚ö†Ô∏è –≤–Ω–∏–º–∞–Ω–∏–µ',
    '- **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é**: –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ä–∞–∑–¥–µ–ª—è–π —Å–µ–∫—Ü–∏–∏ –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏',
    '- **–í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ —Ü–∏—Ñ—Ä—ã** –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º',
    '- **–°–æ–∑–¥–∞–≤–∞–π —Ç–∞–±–ª–∏—Ü—ã** –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å—Ö–æ–¥—ã, –¥–æ—Ö–æ–¥—ã, –ø—Ä–æ–¥—É–∫—Ç—ã)',
    '',
    '## –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:',
    '- **–í—Å–µ–≥–¥–∞** –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ú–¢–ë–∞–Ω–∫ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –∏ —É—Å–ª–æ–≤–∏—è–º–∏',
    '- **–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π** –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –≤—ã–≥–æ–¥—É –≤ BYN (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–î–æ—Ö–æ–¥ **120 BYN/–≥–æ–¥** –ø—Ä–∏ –≤–∫–ª–∞–¥–µ 1000 BYN –ø–æ–¥ 12%")',
    '- **–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π** –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–µ–Ω–∞ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ [REDACTED_NAME])',
    '- **–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º**: –≤–º–µ—Å—Ç–æ "–æ—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥" ‚Üí "–æ—Ç–∫—Ä–æ–π—Ç–µ **–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥** –ø–æ–¥ **12% –≥–æ–¥–æ–≤—ã—Ö**"',
    '- **–§–æ–∫—É—Å –Ω–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è—Ö**: –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥—ã –ú–¢–ë–∞–Ω–∫, –ö–æ–ø–∏–ª–∫—É –∏ –ö–æ–Ω–≤–µ—Ä—Ç–∏–∫–∏',
    '- **–î–æ–±–∞–≤–ª—è–π –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã**: –∏—Å–ø–æ–ª—å–∑—É–π –±–ª–æ–∫–∏ —Ü–∏—Ç–∞—Ç (>) –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤',
    '',
    '## –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
  ];
  if (Array.isArray(a)) {
    a.forEach((v, i) => {
      const labels = ['–¶–µ–ª—å', '–î–æ—Ö–æ–¥', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–°—Ä–æ–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É'];
      lines.push(`**${labels[i] || 'Q' + (i+1)}:** ${v || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    });
  }
  lines.push('');
  lines.push('---');
  lines.push('');
  lines.push('–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≤—ã–ø–∏—Å–∫—É –Ω–∏–∂–µ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã) –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ú–¢–ë–∞–Ω–∫.');
  return lines.join('\n');
}

function escapeRegex(s) {
  return s ? s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : '';
}

function redactPII(text, firstName = '', lastName = '') {
  if (!text) return '';
  let t = text;

  // –Ø–≤–Ω—ã–µ –ø–æ–ª—è –§–ò–û
  t = t.replace(/(–§–ò–û\s*[:\-]?\s*)([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+(?:\s+[–ê-–Ø–Å][–∞-—è—ë]+)?)/gmu, '$1[REDACTED_NAME]');
  t = t.replace(/(–î–µ—Ä–∂–∞—Ç–µ–ª—å –∫–∞—Ä—Ç—ã|–ü–æ–ª—É—á–∞—Ç–µ–ª—å|–í–ª–∞–¥–µ–ª–µ—Ü)\s*[:\-]?\s*[^\n]+/gmu, '$1: [REDACTED_NAME]');

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–º–µ–Ω–∞
  const names = [];
  const fn = (firstName || '').trim();
  const ln = (lastName || '').trim();
  if (fn) names.push(fn);
  if (ln) names.push(ln);
  if (fn && ln) names.push(`${fn} ${ln}`);

  names.forEach((n) => {
    if (!n) return;
    const r = new RegExp(`\\b${escapeRegex(n)}\\b`, 'gimu');
    t = t.replace(r, '[REDACTED_NAME]');
  });

  // –û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –¥–≤–∞-—Ç—Ä–∏ —Å–ª–æ–≤–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ
  t = t.replace(/\b[–ê-–Ø–Å][–∞-—è—ë]{2,}\s+[–ê-–Ø–Å][–∞-—è—ë]{2,}(?:\s+[–ê-–Ø–Å][–∞-—è—ë]{2,})?\b/gmu, (m) => {
    if (/^(–û–û–û|–ó–ê–û|–û–ê–û|–ò–ü)\b/i.test(m)) return m; // –∫–æ–º–ø–∞–Ω–∏–∏
    return '[REDACTED_NAME]';
  });

  return t;
}

app.post('/api/analyze', upload.single('pdf'), async (req, res) => {
  try {
    const key = process.env.GEMINI_API_KEY;
    if (!key) {
      return res.status(500).json({ error: 'GEMINI_API_KEY is not configured' });
    }
    const model = process.env.GEMINI_MODEL || 'gemini-2.0-flash-exp';
    const fallbackModel = 'gemini-1.5-flash';
    if (!req.file) {
      return res.status(400).json({ error: 'PDF —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    if (req.file.mimetype !== 'application/pdf') {
      return res.status(400).json({ error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF' });
    }

    const answers = [req.body.q1, req.body.q2, req.body.q3, req.body.q4, req.body.q5];
    const firstName = req.body.firstName || '';
    const lastName = req.body.lastName || '';
    const prompt = buildPrompt(answers);

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –∏ —É–¥–∞–ª–µ–Ω–∏–µ –§–ò–û
    const parsed = await pdfParse(req.file.buffer).catch(() => ({ text: '' }));
    const rawText = parsed?.text || '';
    const sanitized = redactPII(rawText, firstName, lastName);
    const limited = sanitized.slice(0, 100000);

    const endpointBase = 'https://generativelanguage.googleapis.com/v1/models/';
    const body = {
      contents: [
        {
          role: 'user',
          parts: [
            { text: prompt },
            { text: '–¢–µ–∫—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π, –±–µ–∑ –§–ò–û):\n' + limited }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.3,
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 8192
      }
    };
    async function call(modelName) {
      const endpoint = `${endpointBase}${encodeURIComponent(modelName)}:generateContent?key=${encodeURIComponent(key)}`;
      
      // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç - 5 –º–∏–Ω—É—Ç
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 300000); // 5 min
      
      try {
        const r = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body),
          signal: controller.signal
        });
        clearTimeout(timeoutId);
        return r;
      } catch (err) {
        clearTimeout(timeoutId);
        if (err.name === 'AbortError') {
          console.error('Request timeout after 5 minutes');
        }
        throw err;
      }
    }

    // Try primary model, then fallback if needed
    let r = await call(model);
    if (!r.ok) {
      const errText = await r.text();
      console.error('Gemini API error (primary)', { model, details: errText });
      if (model !== fallbackModel) {
        const r2 = await call(fallbackModel);
        if (!r2.ok) {
          const errText2 = await r2.text();
          console.error('Gemini API error (fallback)', { fallbackModel, details: errText2 });
          return res.status(502).json({ error: 'Gemini API error', details: `primary(${model}): ${errText}\n fallback(${fallbackModel}): ${errText2}` });
        }
        r = r2;
      } else {
        return res.status(502).json({ error: 'Gemini API error', details: errText });
      }
    }

    const json = await r.json();
    console.log('Gemini API response structure:', JSON.stringify(json, null, 2).slice(0, 500));
    
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    let text = '';
    
    if (json?.candidates && json.candidates.length > 0) {
      const candidate = json.candidates[0];
      
      if (candidate?.content?.parts && Array.isArray(candidate.content.parts)) {
        text = candidate.content.parts.map(p => p.text || '').join('');
      } else if (candidate?.content?.parts?.[0]?.text) {
        text = candidate.content.parts[0].text;
      } else if (candidate?.text) {
        text = candidate.text;
      }
    }
    
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –ª–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
    if (!text || text.trim() === '') {
      console.error('Empty response from Gemini. Full JSON:', JSON.stringify(json, null, 2));
      text = '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.';
    } else {
      console.log('Successfully extracted text, length:', text.length);
    }

    res.setHeader('Cache-Control', 'no-store');
    return res.json({ analysis: text });
  } catch (e) {
    return res.status(500).json({ error: 'Server error', details: String(e) });
  }
});

// Chat endpoint
app.post('/api/chat', async (req, res) => {
  try {
    const key = process.env.GEMINI_API_KEY;
    if (!key) {
      return res.status(500).json({ error: 'GEMINI_API_KEY is not configured' });
    }
    
    const { message } = req.body;
    if (!message || !message.trim()) {
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    const model = process.env.GEMINI_MODEL || 'gemini-1.5-pro';
    const endpointBase = 'https://generativelanguage.googleapis.com/v1/models/';
    
    const chatPrompt = `–¢—ã ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ú–¢–ë–∞–Ω–∫–∞ (–ë–µ–ª–∞—Ä—É—Å—å). –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤), –ø–æ –¥–µ–ª—É, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. 
–ü–æ–º–æ–≥–∞–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –ú–¢–ë–∞–Ω–∫ (–≤–∫–ª–∞–¥—ã, –∫—Ä–µ–¥–∏—Ç—ã, –ö–æ–Ω–≤–µ—Ä—Ç–∏–∫–∏, –ö–æ–ø–∏–ª–∫–∞), –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ú–¢–ë–∞–Ω–∫.

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}`;

    const body = {
      contents: [
        {
          role: 'user',
          parts: [{ text: chatPrompt }]
        }
      ],
      generationConfig: {
        maxOutputTokens: 150,
        temperature: 0.7
      }
    };

    const url = `${endpointBase}${model}:generateContent?key=${key}`;
    const apiRes = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });

    if (!apiRes.ok) {
      const errText = await apiRes.text();
      console.error('Gemini API error:', apiRes.status, errText);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ API', details: errText });
    }

    const data = await apiRes.json();
    const reply = data?.candidates?.[0]?.content?.parts?.[0]?.text || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
    const limitedReply = reply.length > 300 ? reply.slice(0, 297) + '...' : reply;
    
    res.json({ reply: limitedReply });
  } catch (err) {
    console.error('Chat error:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

function startServer() {
  let requested = process.env.PORT ? Number(process.env.PORT) : 3000;
  if (Number.isNaN(requested)) requested = 3000;

  // If PORT=0, let OS choose a free port
  const maxAttempts = requested === 0 ? 1 : 10;
  let attempt = 0;

  function tryListen(port) {
    const server = app.listen(port, () => {
      const addr = server.address();
      const usedPort = typeof addr === 'object' && addr ? addr.port : port;
      console.log(`Server listening on http://localhost:${usedPort}`);
    });
    server.on('error', (err) => {
      if (err && err.code === 'EADDRINUSE' && attempt < maxAttempts - 1) {
        attempt += 1;
        const next = port === 0 ? 0 : port + 1;
        console.warn(`Port ${port} in use, trying ${next}...`);
        tryListen(next);
      } else {
        console.error('Failed to start server:', err);
        process.exit(1);
      }
    });
  }

  tryListen(requested);
}

startServer();
