const { useState, useMemo, Fragment } = React;

function initialsFrom(name, last) {
  const a = (name || '').trim();
  const b = (last || '').trim();
  const i1 = a ? a[0] : '';
  const i2 = b ? b[0] : '';
  return (i1 + i2).toUpperCase() || '–ê–ò';
}

function Icon({ name, active }) {
  const color = active ? '#8b5cf6' : 'currentColor';
  const common = { width: 22, height: 22, viewBox: '0 0 24 24', fill: 'none', stroke: color, strokeWidth: 2, strokeLinecap: 'round', strokeLinejoin: 'round' };
  if (name === 'home') {
    return (
      <svg {...common}><path d="M3 11l9-7 9 7"/><path d="M9 22V12h6v10"/></svg>
    );
  }
  if (name === 'pay') {
    return (
      <svg {...common}><rect x="3" y="4" width="18" height="14" rx="2"/><path d="M3 10h18"/></svg>
    );
  }
  if (name === 'products') {
    return (
      <svg {...common}><rect x="3" y="3" width="7" height="7" rx="2"/><rect x="14" y="3" width="7" height="7" rx="2"/><rect x="3" y="14" width="7" height="7" rx="2"/><rect x="14" y="14" width="7" height="7" rx="2"/></svg>
    );
  }
  if (name === 'chat') {
    return (
      <svg {...common}><path d="M21 15a4 4 0 0 1-4 4H8l-5 3V7a4 4 0 0 1 4-4h10a4 4 0 0 1 4 4z"/></svg>
    );
  }
  return null;
}

function fmt(amount, currency = 'BYN', hidden = false) {
  if (hidden) return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
  try {
    return new Intl.NumberFormat('ru-BY', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(amount) + ' ' + currency;
  } catch {
    return amount.toFixed(2) + ' ' + currency;
  }
}

function HeaderBar() {
  return (
    <header className="mobile-header" />
  );
}

// Quick actions —É–¥–∞–ª–µ–Ω—ã –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é

function CarouselPlaceholder() {
  return (
    <section className="carousel">
      <div className="carousel-track">
        <div className="product-card svg-card">
          <img src="/media/SUPEROMAVISA.svg" alt="SuperOma Visa" className="card-image" />
        </div>
        <div className="product-card svg-card">
          <img src="/media/SUPEROMAMASTERCARD.svg" alt="SuperOma MasterCard" className="card-image" />
        </div>
      </div>
      <div className="cards-divider">
        <div className="divider-line"></div>
        <div className="divider-dot"></div>
        <div className="divider-line"></div>
      </div>
    </section>
  );
}

function SuperOmaButton({ onClick }) {
  return (
    <button className="superoma-full-btn" onClick={onClick}>
      <img src="/media/—Å—ã–≥–∞—Å—É–ø–µ—Ä–æ–º–∞.svg" alt="–°—ã–≥—Ä–∞—Ç—å SuperOma" className="superoma-btn-image" />
    </button>
  );
}

function TxRow({ icon, name, time, amount, currency }) {
  const positive = amount >= 0;
  return (
    <div className="tx-item">
      <div className="tx-icon" aria-hidden>{icon}</div>
      <div className="tx-main">
        <div className="tx-merchant">{name}</div>
        <div className="tx-time">{time}</div>
      </div>
      <div className={`tx-amount ${positive ? 'pos' : 'neg'}`}>{positive ? '+' : ''}{fmt(Math.abs(amount), currency, false)}</div>
    </div>
  );
}

function Transactions({ items }) {
  return (
    <section className="tx-section">
      <div className="tx-header">
        <div className="tx-title">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</div>
        <a className="tx-all" href="#" onClick={(e)=>{e.preventDefault(); alert('–ò—Å—Ç–æ—Ä–∏—è (–¥–µ–º–æ)')}}>–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ</a>
      </div>
      <div className="tx-list">
        {items.map((t, i) => <TxRow key={i} {...t} />)}
      </div>
    </section>
  );
}

function BottomNav({ active, onChange }) {
  const items = [
    { key: 'home', label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'home' },
    { key: 'pay', label: '–ü–ª–∞—Ç–µ–∂–∏', icon: 'pay' },
    { key: 'products', label: '–ü—Ä–æ–¥—É–∫—Ç—ã', icon: 'products' },
    { key: 'chat', label: '–ß–∞—Ç', icon: 'chat' },
  ];
  return (
    <nav className="bottom-nav">
      {items.map(it => (
        <button key={it.key} className={`nav-item ${active === it.key ? 'active' : ''}`} onClick={()=>onChange(it.key)}>
          <div className="nav-icon" aria-hidden><Icon name={it.icon} active={active === it.key} /></div>
          <div className="nav-label">{it.label}</div>
        </button>
      ))}
    </nav>
  );
}

function Stepper({ step, total }) {
  return (
    <div className="stepper">
      <div className="stepper-track">
        <div className="stepper-progress" style={{ width: `${Math.min(((step+1)/total)*100,100)}%` }} />
      </div>
      <div className="stepper-label">–®–∞–≥ {Math.min(step+1, total)} –∏–∑ {total}</div>
    </div>
  );
}

function Modal({ children, onClose }) {
  return (
    <div className="overlay" role="dialog" aria-modal="true">
      <div className="modal">
        <button className="modal-close-btn" onClick={onClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
        {children}
      </div>
    </div>
  );
}

function RadioGrid({ name, value, onChange, options, onSelect }) {
  return (
    <div className="radio-grid">
      {options.map((opt) => (
        <label key={opt} className={`radio-card ${value===opt ? 'active' : ''}`} onClick={()=>{ onChange(opt); if(onSelect) onSelect(); }}>
          <input type="radio" name={name} value={opt} checked={value===opt} onChange={()=>{}} />
          <span>{opt}</span>
        </label>
      ))}
    </div>
  );
}

function Dropzone({ file, onSelect }) {
  function onDrop(e) {
    e.preventDefault();
    const f = e.dataTransfer.files?.[0];
    if (f) onSelect(f);
  }
  return (
    <div className="dropzone" onDragOver={(e)=>e.preventDefault()} onDrop={onDrop}>
      <div className="dz-label">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF —Å—é–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</div>
      <input type="file" accept="application/pdf" onChange={(e)=>onSelect(e.target.files?.[0] || null)} />
      {file && (
        <div className="dz-file">–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file.name} ({Math.round(file.size/1024)} –ö–ë)</div>
      )}
    </div>
  );
}

function MobileApp() {
  const [open, setOpen] = useState(false);
  const [step, setStep] = useState(-1);
  const total = 6;
  const [aiMode, setAiMode] = useState(''); // 5 –≤–æ–ø—Ä–æ—Å–æ–≤ + PDF (–±–µ–∑ –∏–º–µ–Ω–∏)

  // profile/greetings
  const [profileFirstName, setProfileFirstName] = useState('–ê–ª–µ–∫—Å–µ–π');
  const [profileLastName, setProfileLastName] = useState('–ò–≤–∞–Ω–æ–≤');
  const [notifCount, setNotifCount] = useState(2);
  const [active, setActive] = useState('home');
  const [showMapPage, setShowMapPage] = useState(false);

  // quick actions + report wizard
  const [q1, setQ1] = useState('');
  const [q2, setQ2] = useState('');
  const [q3, setQ3] = useState('');
  const [q4, setQ4] = useState('');
  const [q5, setQ5] = useState('');
  const [wizardFirstName, setWizardFirstName] = useState('');
  const [wizardLastName, setWizardLastName] = useState('');
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [resultHTML, setResultHTML] = useState('');

  // carousel
  const [hide, setHide] = useState(false);

  // transactions
  const tx = useMemo(() => ([
    { icon: 'üõí', name: '–ì–ò–ü–ü–û', time: '–°–µ–≥–æ–¥–Ω—è, 14:31', amount: -27.50, currency: 'BYN' },
    { icon: '‚òï', name: '–ö–æ—Ñ–µ–π–Ω—è', time: '–°–µ–≥–æ–¥–Ω—è, 12:10', amount: -4.20, currency: 'BYN' },
    { icon: 'üí∏', name: '–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ò–≤–∞–Ω–∞ –ü.', time: '–í—á–µ—Ä–∞, 10:35', amount: 100.00, currency: 'BYN' }
  ]), []);

  function resetWizard() {
    setStep(-1);
    setAiMode('');
    setQ1(''); setQ2(''); setQ3(''); setQ4(''); setQ5('');
    setWizardFirstName(''); setWizardLastName(''); setFile(null); setError('');
    setLoading(false); setResultHTML('');
    setChatMessages([]);
    setChatInput('');
  }

  const [chatMessages, setChatMessages] = useState([]);
  const [chatInput, setChatInput] = useState('');
  
  // Konvertiki state
  const [konvertiki, setKonvertiki] = useState([
    { 
      id: 1, 
      goal: '–û—Ç–ø—É—Å–∫', 
      current: 450, 
      target: 2000, 
      participants: [
        { id: 1, name: '–ê–ª–µ–∫—Å–µ–π', avatar: 'https://i.pravatar.cc/150?img=12' },
        { id: 2, name: '–ú–∞—Ä–∏—è', avatar: 'https://i.pravatar.cc/150?img=5' }
      ],
      payments: [
        { id: 1, date: '–°–µ–≥–æ–¥–Ω—è, 14:31', amount: 50, type: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', from: '–ê–ª–µ–∫—Å–µ–π' },
        { id: 2, date: '–í—á–µ—Ä–∞, 18:20', amount: 100, type: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', from: '–ú–∞—Ä–∏—è' },
        { id: 3, date: '–í—á–µ—Ä–∞, 12:15', amount: 150, type: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', from: '–ê–ª–µ–∫—Å–µ–π' },
        { id: 4, date: '20 –æ–∫—Ç, 16:45', amount: 150, type: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', from: '–ú–∞—Ä–∏—è' }
      ],
      roundingAmount: 0.05
    }
  ]);
  
  const [showKonvertikModal, setShowKonvertikModal] = useState(false);
  const [showParticipantsModal, setShowParticipantsModal] = useState(false);
  const [showKonvertikDetailModal, setShowKonvertikDetailModal] = useState(false);
  const [selectedKonvertik, setSelectedKonvertik] = useState(null);
  const [newKonvertikGoal, setNewKonvertikGoal] = useState('');
  const [newKonvertikTarget, setNewKonvertikTarget] = useState('');
  const [newKonvertikParticipants, setNewKonvertikParticipants] = useState([]);
  
  const availableParticipants = [
    { id: 1, name: '–ê–ª–µ–∫—Å–µ–π', avatar: 'https://i.pravatar.cc/150?img=12' },
    { id: 2, name: '–ú–∞—Ä–∏—è', avatar: 'https://i.pravatar.cc/150?img=5' },
    { id: 3, name: '–î–º–∏—Ç—Ä–∏–π', avatar: 'https://i.pravatar.cc/150?img=33' },
    { id: 4, name: '–ï–ª–µ–Ω–∞', avatar: 'https://i.pravatar.cc/150?img=9' },
    { id: 5, name: '–ò–≤–∞–Ω', avatar: 'https://i.pravatar.cc/150?img=15' },
    { id: 6, name: '–ê–Ω–Ω–∞', avatar: 'https://i.pravatar.cc/150?img=20' }
  ];
  
  function openKonvertikModal() {
    setNewKonvertikGoal('');
    setNewKonvertikTarget('');
    setNewKonvertikParticipants([]);
    setShowKonvertikModal(true);
  }
  
  function toggleParticipant(participant) {
    setNewKonvertikParticipants(prev => {
      const exists = prev.find(p => p.id === participant.id);
      if (exists) {
        return prev.filter(p => p.id !== participant.id);
      } else {
        return [...prev, participant];
      }
    });
  }
  
  function createKonvertik() {
    if (!newKonvertikGoal.trim() || !newKonvertikTarget || newKonvertikParticipants.length === 0) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
      return;
    }
    const newId = Math.max(...konvertiki.map(k => k.id), 0) + 1;
    setKonvertiki([...konvertiki, { 
      id: newId, 
      goal: newKonvertikGoal, 
      current: 0, 
      target: parseFloat(newKonvertikTarget),
      participants: newKonvertikParticipants,
      payments: [],
      roundingAmount: 0.05
    }]);
    setShowKonvertikModal(false);
  }
  
  function openKonvertikDetail(konvertik) {
    setSelectedKonvertik(konvertik);
    setShowKonvertikDetailModal(true);
  }

  async function sendChatMessage() {
    if (!chatInput.trim()) return;
    const userMsg = { role: 'user', text: chatInput };
    setChatMessages(prev => [...prev, userMsg]);
    const question = chatInput;
    setChatInput('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    setChatMessages(prev => [...prev, { role: 'ai', text: '–ü–µ—á–∞—Ç–∞—é...', typing: true }]);
    
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: question })
      });
      
      const data = await response.json();
      
      // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      setChatMessages(prev => prev.filter(m => !m.typing));
      
      if (response.ok && data.reply) {
        setChatMessages(prev => [...prev, { role: 'ai', text: data.reply }]);
      } else {
        setChatMessages(prev => [...prev, { role: 'ai', text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.' }]);
      }
    } catch (error) {
      setChatMessages(prev => prev.filter(m => !m.typing));
      setChatMessages(prev => [...prev, { role: 'ai', text: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.' }]);
    }
  }

  function next() { setStep((s)=>Math.min(s+1, total)); }

  async function submit() {
    setError('');
    if (!file) { setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª.'); return; }
    if (file.type !== 'application/pdf') { setError('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF.'); return; }
    if (file.size > 20*1024*1024) { setError('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 20 –ú–ë.'); return; }

    setLoading(true);

    const fd = new FormData();
    fd.append('pdf', file);
    fd.append('q1', q1); fd.append('q2', q2); fd.append('q3', q3); fd.append('q4', q4); fd.append('q5', q5);
    fd.append('firstName', wizardFirstName); fd.append('lastName', wizardLastName);

    try {
      const r = await fetch('/api/analyze', { method: 'POST', body: fd });
      const json = await r.json();
      if (!r.ok) {
        const details = json?.details ? `: ${String(json.details)}` : '';
        setError((json?.error || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞') + details);
        setLoading(false);
        return;
      }
      const html = window.marked?.parse(json.analysis || '') || (json.analysis || '');
      setResultHTML(html);
      setLoading(false);
      setStep(7);
    } catch (e) {
      setError('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞');
      setLoading(false);
    }
  }

  return (
    <Fragment>
      <div className="mobile-shell">
        <HeaderBar />

        <main className="mobile-main">
          {active === 'home' && !showMapPage && (
            <Fragment>
              <CarouselPlaceholder />
              <SuperOmaButton onClick={()=>setShowMapPage(true)} />
              
              <div className="page-divider"></div>
              
              <section className="konvertiki-section-new">
                <div className="konvertiki-header">
                  <h3 className="konvertiki-title">–ö–æ–Ω–≤–µ—Ä—Ç–∏–∫–∏</h3>
                  <button className="konvertiki-add-btn" onClick={openKonvertikModal} aria-label="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <line x1="12" y1="5" x2="12" y2="19"></line>
                      <line x1="5" y1="12" x2="19" y2="12"></line>
                    </svg>
                  </button>
                </div>
                <div className="konvertiki-list">
                  {konvertiki.map((k) => {
                    const progress = Math.min((k.current / k.target) * 100, 100);
                    return (
                      <div key={k.id} className="konvertik-card-new" onClick={()=>openKonvertikDetail(k)}>
                        <div className="konvertik-goal">{k.goal}</div>
                        <div className="konvertik-content">
                          <div className="konvertik-envelope">
                            <svg width="80" height="80" viewBox="0 0 100 100" className="envelope-svg">
                              <rect x="10" y="25" width="80" height="50" rx="4" fill="rgba(17,26,43,0.6)" stroke="#8b5cf6" strokeWidth="2"/>
                              <path d="M10 25 L50 55 L90 25" fill="none" stroke="#8b5cf6" strokeWidth="2" strokeLinejoin="round"/>
                            </svg>
                          </div>
                          <div className="konvertik-progress-bar">
                            <div className="konvertik-progress-fill" style={{width: `${progress}%`}}></div>
                          </div>
                          <div className="konvertik-info">
                            <div className="konvertik-amount">{k.current} / {k.target} BYN</div>
                            <div className="konvertik-participants">
                              {k.participants.slice(0, 3).map((p, i) => (
                                <img key={p.id} src={p.avatar} alt={p.name} className="participant-avatar" style={{marginLeft: i > 0 ? '-8px' : '0'}} />
                              ))}
                              {k.participants.length > 3 && <span className="participant-more">+{k.participants.length - 3}</span>}
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </section>
              
              <div className="page-divider"></div>
              
              <Transactions items={tx} />
            </Fragment>
          )}
          
          {active === 'home' && showMapPage && (
            <div className="map-page">
              <button className="map-back-btn" onClick={()=>setShowMapPage(false)} aria-label="–ù–∞–∑–∞–¥">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <line x1="19" y1="12" x2="5" y2="12"></line>
                  <polyline points="12 19 5 12 12 5"></polyline>
                </svg>
              </button>
              <div className="map-container">
                <img src="/media/map.svg" alt="–ö–∞—Ä—Ç–∞ –ø—É—Ç–∏" className="map-image" />
              </div>
            </div>
          )}
          {active === 'pay' && (
            <section className="app-section">
              <h3 className="app-section-title">–ë—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏</h3>
              <div className="app-grid">
                <button className="app-tile">
                  <div className="app-tile-icon">üì±</div>
                  <div className="app-tile-label">–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å</div>
                </button>
                <button className="app-tile">
                  <div className="app-tile-icon">üí°</div>
                  <div className="app-tile-label">–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ</div>
                </button>
                <button className="app-tile">
                  <div className="app-tile-icon">üåê</div>
                  <div className="app-tile-label">–ò–Ω—Ç–µ—Ä–Ω–µ—Ç</div>
                </button>
                <button className="app-tile">
                  <div className="app-tile-icon">üöó</div>
                  <div className="app-tile-label">–®—Ç—Ä–∞—Ñ—ã –ì–ê–ò</div>
                </button>
              </div>
              
              <h3 className="app-section-title" style={{marginTop:'24px'}}>–ü–µ—Ä–µ–≤–æ–¥—ã</h3>
              <div className="app-list">
                <button className="app-list-item">
                  <div className="app-list-icon">üí≥</div>
                  <div className="app-list-content">
                    <div className="app-list-title">–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã</div>
                    <div className="app-list-subtitle">–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥</div>
                  </div>
                  <div className="app-list-arrow">‚Ä∫</div>
                </button>
                <button className="app-list-item">
                  <div className="app-list-icon">üìû</div>
                  <div className="app-list-content">
                    <div className="app-list-title">–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</div>
                    <div className="app-list-subtitle">–ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏</div>
                  </div>
                  <div className="app-list-arrow">‚Ä∫</div>
                </button>
              </div>
            </section>
          )}
          {active === 'products' && (
            <section className="app-section">
              <h3 className="app-section-title">–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</h3>
              <div className="app-list">
                <button className="app-list-item">
                  <div className="app-list-icon">üí≥</div>
                  <div className="app-list-content">
                    <div className="app-list-title">–ö–∞—Ä—Ç—ã</div>
                    <div className="app-list-subtitle">2 –∞–∫—Ç–∏–≤–Ω—ã–µ ‚Ä¢ SuperOma Visa, MasterCard</div>
                  </div>
                  <div className="app-list-arrow">‚Ä∫</div>
                </button>
                <button className="app-list-item">
                  <div className="app-list-icon">üí∞</div>
                  <div className="app-list-content">
                    <div className="app-list-title">–í–∫–ª–∞–¥—ã</div>
                    <div className="app-list-subtitle">–î–æ 12% –≥–æ–¥–æ–≤—ã—Ö ‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π, –°—Ä–æ—á–Ω—ã–π</div>
                  </div>
                  <div className="app-list-arrow">‚Ä∫</div>
                </button>
                <button className="app-list-item">
                  <div className="app-list-icon">üè¶</div>
                  <div className="app-list-content">
                    <div className="app-list-title">–ö—Ä–µ–¥–∏—Ç—ã</div>
                    <div className="app-list-subtitle">–û—Ç 9.9% ‚Ä¢ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π, –ê–≤—Ç–æ</div>
                  </div>
                  <div className="app-list-arrow">‚Ä∫</div>
                </button>
              </div>
              
              <h3 className="app-section-title" style={{marginTop:'24px'}}>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</h3>
              <button className="app-action-btn" onClick={()=>{ setOpen(true); resetWizard(); }}>
                <div className="app-action-icon">üìä</div>
                <div className="app-action-content">
                  <div className="app-action-title">–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç</div>
                  <div className="app-action-subtitle">–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
                </div>
              </button>
            </section>
          )}
          {active === 'chat' && (
            <section className="app-section">
              <h3 className="app-section-title">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</h3>
              <button className="app-action-btn" onClick={()=>{ setOpen(true); setAiMode('chat'); setStep(100); }}>
                <div className="app-action-icon">üí¨</div>
                <div className="app-action-content">
                  <div className="app-action-title">–ß–∞—Ç —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º</div>
                  <div className="app-action-subtitle">–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö 24/7</div>
                </div>
              </button>
              
              <h3 className="app-section-title" style={{marginTop:'24px'}}>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
              <div className="app-list">
                <button className="app-list-item">
                  <div className="app-list-icon">üìû</div>
                  <div className="app-list-content">
                    <div className="app-list-title">–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è</div>
                    <div className="app-list-subtitle">+375 (17) 229-2-229</div>
                  </div>
                  <div className="app-list-arrow">‚Ä∫</div>
                </button>
                <button className="app-list-item">
                  <div className="app-list-icon">‚úâÔ∏è</div>
                  <div className="app-list-content">
                    <div className="app-list-title">Email</div>
                    <div className="app-list-subtitle">info@mtbank.by</div>
                  </div>
                  <div className="app-list-arrow">‚Ä∫</div>
                </button>
              </div>
            </section>
          )}
        </main>
        <button className="fab" onClick={()=>{ setOpen(true); resetWizard(); }} aria-label="–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç">
          <img src="/media/–∫–Ω–∏–ø–∫–∞–ø–æ–¥—Å—á–µ—Ç–∫—Ä–µ–¥–∏—Ç–∞.svg" alt="–ü–æ–¥—Å—á–µ—Ç –∫—Ä–µ–¥–∏—Ç–∞" className="fab-image" />
        </button>

        <BottomNav active={active} onChange={setActive} />
      </div>

      {showKonvertikModal && (
        <Modal onClose={()=>setShowKonvertikModal(false)}>
          <div className="modal-body">
            <h2>–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏–∫</h2>
            <p className="muted">–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å—É–º–º—É</p>
            
            <div style={{marginTop:'20px'}}>
              <label className="input-label">–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏</label>
              <input 
                type="text" 
                className="modal-input" 
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Ç–ø—É—Å–∫, –ü–æ–¥–∞—Ä–æ–∫, –ê–≤—Ç–æ"
                value={newKonvertikGoal}
                onChange={(e)=>setNewKonvertikGoal(e.target.value)}
              />
            </div>
            
            <div style={{marginTop:'16px'}}>
              <label className="input-label">–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ (BYN)</label>
              <input 
                type="number" 
                className="modal-input" 
                placeholder="1000"
                value={newKonvertikTarget}
                onChange={(e)=>setNewKonvertikTarget(e.target.value)}
              />
            </div>
            
            <div style={{marginTop:'16px'}}>
              <label className="input-label">–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({newKonvertikParticipants.length})</label>
              <button className="btn" onClick={()=>setShowParticipantsModal(true)} style={{width:'100%',marginTop:'8px'}}>
                {newKonvertikParticipants.length === 0 ? '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' : '–ò–∑–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}
              </button>
              {newKonvertikParticipants.length > 0 && (
                <div className="selected-participants">
                  {newKonvertikParticipants.map(p => (
                    <div key={p.id} className="selected-participant">
                      <img src={p.avatar} alt={p.name} className="participant-avatar-small" />
                      <span>{p.name}</span>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            <div className="modal-actions">
              <button className="btn" onClick={()=>setShowKonvertikModal(false)}>–û—Ç–º–µ–Ω–∞</button>
              <button className="btn primary" onClick={createKonvertik}>–°–æ–∑–¥–∞—Ç—å</button>
            </div>
          </div>
        </Modal>
      )}

      {showParticipantsModal && (
        <Modal onClose={()=>setShowParticipantsModal(false)}>
          <div className="modal-body">
            <h2>–í—ã–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h2>
            <p className="muted">–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∫–æ–ø–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏</p>
            
            <div className="participants-grid">
              {availableParticipants.map(p => {
                const isSelected = newKonvertikParticipants.find(sp => sp.id === p.id);
                return (
                  <div 
                    key={p.id} 
                    className={`participant-card ${isSelected ? 'selected' : ''}`}
                    onClick={()=>toggleParticipant(p)}
                  >
                    <img src={p.avatar} alt={p.name} className="participant-avatar-large" />
                    <div className="participant-name">{p.name}</div>
                    {isSelected && (
                      <div className="participant-check">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
                          <polyline points="20 6 9 17 4 12"></polyline>
                        </svg>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
            
            <div className="modal-actions">
              <button className="btn primary" onClick={()=>setShowParticipantsModal(false)}>–ì–æ—Ç–æ–≤–æ</button>
            </div>
          </div>
        </Modal>
      )}

      {showKonvertikDetailModal && selectedKonvertik && (
        <Modal onClose={()=>setShowKonvertikDetailModal(false)}>
          <div className="modal-body">
            <h2>{selectedKonvertik.goal}</h2>
            <p className="muted">–î–µ—Ç–∞–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏–∫–∞</p>
            
            {/* –ö–æ–Ω–≤–µ—Ä—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
            <div className="detail-envelope-section">
              <div className="detail-envelope">
                <svg width="120" height="120" viewBox="0 0 100 100" className="envelope-svg-large">
                  <rect x="10" y="25" width="80" height="50" rx="4" fill="rgba(17,26,43,0.6)" stroke="#8b5cf6" strokeWidth="2"/>
                  <path d="M10 25 L50 55 L90 25" fill="none" stroke="#8b5cf6" strokeWidth="2" strokeLinejoin="round"/>
                </svg>
              </div>
              <div className="detail-progress-bar">
                <div className="detail-progress-fill" style={{width: `${Math.min((selectedKonvertik.current / selectedKonvertik.target) * 100, 100)}%`}}></div>
              </div>
              <div className="detail-amount">{selectedKonvertik.current} / {selectedKonvertik.target} BYN</div>
              <div className="detail-percent">{Math.min((selectedKonvertik.current / selectedKonvertik.target) * 100, 100).toFixed(1)}% —Å–æ–±—Ä–∞–Ω–æ</div>
            </div>
            
            {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ */}
            <div className="detail-section">
              <div className="detail-section-header">
                <div className="detail-section-icon">üîÑ</div>
                <div>
                  <div className="detail-section-title">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ</div>
                  <div className="detail-section-subtitle">–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏</div>
                </div>
              </div>
              <div className="detail-rounding-info">
                <div className="rounding-amount">{selectedKonvertik.roundingAmount.toFixed(2)} BYN</div>
                <div className="rounding-text">—Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–µ</div>
              </div>
            </div>
            
            {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ */}
            <div className="detail-section">
              <div className="detail-section-header">
                <div className="detail-section-icon">üë•</div>
                <div>
                  <div className="detail-section-title">–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({selectedKonvertik.participants.length})</div>
                  <div className="detail-section-subtitle">–ö–æ–ø—è—Ç –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏</div>
                </div>
              </div>
              <div className="detail-participants-list">
                {selectedKonvertik.participants.map(p => (
                  <div key={p.id} className="detail-participant">
                    <img src={p.avatar} alt={p.name} className="detail-participant-avatar" />
                    <div className="detail-participant-name">{p.name}</div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π */}
            <div className="detail-section">
              <div className="detail-section-header">
                <div className="detail-section-icon">üí∞</div>
                <div>
                  <div className="detail-section-title">–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</div>
                  <div className="detail-section-subtitle">{selectedKonvertik.payments?.length || 0} –æ–ø–µ—Ä–∞—Ü–∏–π</div>
                </div>
              </div>
              <div className="detail-payments-list">
                {selectedKonvertik.payments && selectedKonvertik.payments.length > 0 ? (
                  selectedKonvertik.payments.map(payment => (
                    <div key={payment.id} className="detail-payment">
                      <div className="detail-payment-icon">üí∏</div>
                      <div className="detail-payment-main">
                        <div className="detail-payment-type">{payment.type}</div>
                        <div className="detail-payment-info">{payment.from} ‚Ä¢ {payment.date}</div>
                      </div>
                      <div className="detail-payment-amount">+{payment.amount} BYN</div>
                    </div>
                  ))
                ) : (
                  <div className="detail-empty">–ü–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π</div>
                )}
              </div>
            </div>
            
            <div className="modal-actions">
              <button className="btn primary" onClick={()=>setShowKonvertikDetailModal(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
          </div>
        </Modal>
      )}

      {open && (
        <Modal onClose={()=>setOpen(false)}>
          {step >= 0 && step < 100 && aiMode === 'analysis' && <Stepper step={Math.min(step, total-1)} total={total} />}
          <div className="modal-body">
            {step === -1 && (
              <div>
                <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º</h2>
                <p className="muted">–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</p>
                <div className="radio-grid">
                  <button className="radio-card mode-select" onClick={()=>{ setAiMode('chat'); setStep(100); }}>
                    <span>üí¨ –ß–∞—Ç —Å –ò–ò</span>
                  </button>
                  <button className="radio-card mode-select" onClick={()=>{ setAiMode('analysis'); setStep(0); }}>
                    <span>üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤</span>
                  </button>
                </div>
              </div>
            )}

            {step === 100 && (
              <div>
                <h2>üí¨ –ß–∞—Ç —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º</h2>
                <div className="chat-container">
                  <div className="chat-messages">
                    {chatMessages.length === 0 && (
                      <div className="chat-welcome">
                        <div className="chat-welcome-icon">üëã</div>
                        <p>–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.</p>
                        <p className="muted">–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö!</p>
                      </div>
                    )}
                    {chatMessages.map((msg, i) => (
                      <div key={i} className={`chat-message ${msg.role}`}>
                        <div className="chat-avatar">{msg.role === 'user' ? 'üë§' : 'üí¨'}</div>
                        <div className="chat-bubble">{msg.text}</div>
                      </div>
                    ))}
                  </div>
                  <div className="chat-input-area">
                    <label className="chat-attach-btn" title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path>
                      </svg>
                      <input type="file" style={{display:'none'}} />
                    </label>
                    <input 
                      type="text" 
                      className="chat-input" 
                      placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                      value={chatInput}
                      onChange={(e)=>setChatInput(e.target.value)}
                      onKeyPress={(e)=>{ if(e.key==='Enter') sendChatMessage(); }}
                    />
                    <button className="chat-send-btn" onClick={sendChatMessage}>
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <line x1="22" y1="2" x2="11" y2="13"></line>
                        <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            )}

            {step === 0 && aiMode === 'analysis' && (
              <div>
                <h2>–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?</h2>
                <p className="muted">–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å</p>
                <RadioGrid name="q1" value={q1} onChange={setQ1} onSelect={next} options={[
                  '–≠–∫–æ–Ω–æ–º–∏—Ç—å –±–æ–ª—å—à–µ',
                  '–ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –¥–æ–ª–≥–æ–≤',
                  '–ù–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫—É',
                  '–ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å'
                ]} />
                <button className="modal-back-btn" onClick={()=>{ setStep(-1); setAiMode(''); }} aria-label="–ù–∞–∑–∞–¥">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                  </svg>
                </button>
              </div>
            )}

            {step === 1 && aiMode === 'analysis' && (
              <div>
                <h2>–ö–∞–∫–æ–π —É –≤–∞—Å –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü?</h2>
                <p className="muted">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç</p>
                <RadioGrid name="q2" value={q2} onChange={setQ2} onSelect={next} options={[
                  '–ú–µ–Ω–µ–µ 800 BYN',
                  '1000 - 1500 BYN',
                  '1500 - 2500 BYN',
                  '–ë–æ–ª–µ–µ 2500 BYN'
                ]} />
                <button className="modal-back-btn" onClick={()=>setStep(0)} aria-label="–ù–∞–∑–∞–¥">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                  </svg>
                </button>
              </div>
            )}

            {step === 2 && aiMode === 'analysis' && (
              <div>
                <h2>–ß—Ç–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?</h2>
                <p className="muted">–ù–∞ —á—ë–º —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å</p>
                <RadioGrid name="q3" value={q3} onChange={setQ3} onSelect={next} options={[
                  '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤',
                  '–ó–∞–∫—Ä—ã—Ç—å –∫—Ä–µ–¥–∏—Ç—ã',
                  '–ù–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å',
                  '–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'
                ]} />
                <button className="modal-back-btn" onClick={()=>setStep(1)} aria-label="–ù–∞–∑–∞–¥">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                  </svg>
                </button>
              </div>
            )}

            {step === 3 && aiMode === 'analysis' && (
              <div>
                <h2>–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?</h2>
                <p className="muted">–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</p>
                <RadioGrid name="q4" value={q4} onChange={setQ4} onSelect={next} options={['1 –º–µ—Å—è—Ü','3 –º–µ—Å—è—Ü–∞','6 –º–µ—Å—è—Ü–µ–≤','1 –≥–æ–¥']} />
                <button className="modal-back-btn" onClick={()=>setStep(2)} aria-label="–ù–∞–∑–∞–¥">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                  </svg>
                </button>
              </div>
            )}

            {step === 4 && aiMode === 'analysis' && (
              <div>
                <h2>–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä–∏—Å–∫—É?</h2>
                <p className="muted">–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏—è–º</p>
                <RadioGrid name="q5" value={q5} onChange={setQ5} onSelect={next} options={['–û—Å—Ç–æ—Ä–æ–∂–Ω–æ','–£–º–µ—Ä–µ–Ω–Ω–æ','–°–º–µ–ª–æ']} />
                <button className="modal-back-btn" onClick={()=>setStep(3)} aria-label="–ù–∞–∑–∞–¥">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                  </svg>
                </button>
              </div>
            )}

            {step === 5 && aiMode === 'analysis' && !loading && resultHTML === '' && (
              <div>
                <h2>–í—ã–ø–∏—Å–∫–∞</h2>
                <p className="muted">–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª –≤—ã–ø–∏—Å–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
                
                <div className="file-upload-section">
                  {!file ? (
                    <div className="file-upload-empty">
                      <div className="file-upload-icon">üìÑ</div>
                      <div className="file-upload-text">–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω</div>
                    </div>
                  ) : (
                    <div className="file-upload-selected">
                      <div className="file-upload-icon">üìÑ</div>
                      <div className="file-upload-info">
                        <div className="file-upload-name">{file.name}</div>
                        <div className="file-upload-size">{Math.round(file.size/1024)} –ö–ë</div>
                      </div>
                      <button className="file-remove-btn" onClick={()=>setFile(null)} aria-label="–£–¥–∞–ª–∏—Ç—å">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <line x1="18" y1="6" x2="6" y2="18"></line>
                          <line x1="6" y1="6" x2="18" y2="18"></line>
                        </svg>
                      </button>
                    </div>
                  )}
                  
                  <label className="file-upload-btn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                      <polyline points="17 8 12 3 7 8"></polyline>
                      <line x1="12" y1="3" x2="12" y2="15"></line>
                    </svg>
                    <span>{file ? '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É'}</span>
                    <input type="file" accept="application/pdf" onChange={(e)=>setFile(e.target.files?.[0] || null)} style={{display:'none'}} />
                  </label>
                </div>
                
                {error && <div className="error">{error}</div>}
                <div className="modal-actions">
                  <button className="btn primary" onClick={submit} disabled={!file}>–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑</button>
                </div>
                <button className="modal-back-btn" onClick={()=>setStep(4)} aria-label="–ù–∞–∑–∞–¥">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                  </svg>
                </button>
              </div>
            )}

            {loading && aiMode === 'analysis' && (
              <div className="center">
                <div className="spinner" />
                <div className="muted">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –æ—Ç—á—ë—Ç...</div>
              </div>
            )}

            {!loading && resultHTML !== '' && aiMode === 'analysis' && (
              <div className="result-pane">
                <h2>–ì–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç</h2>
                <div className="markdown" dangerouslySetInnerHTML={{ __html: resultHTML }} />
                <div className="modal-actions">
                  <button className="btn primary" onClick={()=>{ setAiMode('chat'); setStep(100); }}>üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é —Å –ò–ò</button>
                </div>
              </div>
            )}
          </div>
        </Modal>
      )}
    </Fragment>
  );
}

ReactDOM.createRoot(document.getElementById('root')).render(<MobileApp />);
